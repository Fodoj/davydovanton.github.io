---
layout: post
title: "Размышление о vim"
---

1. вступление, о золиварах и прочем
2. моя история становления
3. каким я вижу вим
4. что именно мне нравится
5. заключение

Сказать по правде, я хотел написать статью, в которой бы доказывалось, что vim это легко и удобно, но потом я вспомнил, что таких постов тысячи и это опять вызвало бы холивар vim/emacs/sublime. Поэтому давайте я просто поделюсь всем тем, что познал и думаю об этом редакторе.

Представте себе, 70тые годы, расцвет unix машин, на данный момент существует только [ed](http://en.wikipedia.org/wiki/Ed_(text_editor)), а за ним и [ex](). Во времена первого никто не слышал о мониторах, поэтому использовали для ввода телетайпы, поэтому ed имеет командно-ориентированный интерфейс. А ex являлся улучшеным ed. Поэтому в нем появилась такая штука как экранное редактирование и работа с несколькими файлами, что ждя тех времен является прорывом. Конечно же многие программисты начинают писать свои редакторы и один из них, [Билл Джой](http://en.wikipedia.org/wiki/Bill_Joy), придумывает логичную и простую концепцию поверх редактора ex. Во первых, было бы логично, воспринимать текст как объект к которому применяются команды редактирования. Во вторых, использование unix идеологии о простоте и взаимности комманд. Такб в 1976 году, появляется первая версия текстового редактора vi, сокращено от (visual). Давайте рассмотрит каждую из концепций отдельно.

Во первых, человек часто мыслит абстрактно, поэтому мы никогда не воспринимает набор последовательных символов, как набор  последовательных символов. Мы строим поверх этого набора абстракции, такие как слово, предложение, параграф или обзац и тому подобные. Поэтому, почему бы нам не реализовать эту же идеюd в текстовом редакторе? Думаю этим же вопросом задался Билл Джой и поэтому vi оперирует не просто с набором символов как многие другие текстовые редакторы, а оперирует не посредстве него с объектами-абстракциями: словами, строками, параграфами. 

Допустим мы смогли реализовать такую идею внутри редактора, но теперь встает вопрос, что делать с объектами? Да собственно тоже самое, что мы, доблестные воины кода, делаем с ними каждый день - изменять посредством функций. Кстати, часть функций можно позоимствовать из unix-а, например sort и тому подобные. Поэтому на данный момент наше взаимодействие с редактором можно описать набором функций вида: [комманда] [объект].

А теперь самое интересное, как мы реализуем такое количество комманд и способов выбора объектов, и при этом нам надо как то печатать обычный текст. Поэтому я думаю, что все догадываются, что использовать все клавиши для комманд и для набора текста - не реально вообще никак. А тем более на такой клавиатуре, которые использовали в терминалах того времени.

http://en.wikipedia.org/wiki/File:KB_Terminal_ADM3A.svg
Расположение клавишь на unix терминалах.

Кстати, небольшой оффтоп, вы никогда не задумывались, откуда пошло, что символ '~' в nix like системах обозначает home дирикторию? Посмотрите внимательно на клавиатуру выше, а именно на клавишу home(курсивом) ;)

Так вот, тут то мы и приходим к модальному интерфейсу. Что это значит? Это означает, что существует несколько режимов, в которых различные клавиши выполняют различные комманды. В vi было целых 2 режима: режим вставки, в котором пользователь мог набирать текст, и комманжный режим, в котором пользователь, посредством нажатия комбинаций клавишь, работаете с текстом.

Вся прелесть данного текстового редактора была в его открытости, что позволило в 1991 году, [Браму Мооленару](http://en.wikipedia.org/wiki/Bram_Moolenaar) создать первую версию vim, которая расшифровывается как **V**i **Im**proved. В нем было очень много нового, например визуальный режим, макросы, работа с кучей файлов одновременно, итеграция с ОС и так далее.

Так что же это все дает нам, обычным программистам? Во первых, мы можем приобщиться к истории, а если серьезно - в виду того, что раньше небыло мыши, то все комманды печатались на клавиатуре. Ну а так, как всем известно, что тыкать мышкой в интерфейс дольше, чем использовать хоткеи, то мы получаем довольно сильный профит. Во вторых, интерфейс не перегружен излишней функциональностью, как во многих IDE или текстовых редакторах. В третьих, вы получаете инновационный и очень не обычный, но при этом удобнейший, после привыкания, способ взаимодействия с текстом. Подумайте сами, вы взаимодействуете с текстом как с объектом, а не как с набором символов, что позволяет вам выбирать не просто последовательность символов, а непосредственно слова, параграфы, линии, блоки текста и оперировать с ними как пожелаете.

Но для начала стоит вернуться к режимам. В vim-е их 4: нормальный, в котором мы, посредством хоткеев выполняете операции над текстом, коммандный, в котором вы можете вводить комманды как в консоли(и кстати выполнять консольные комманды тоже), режим вставки, в котором мы можете набирать текст и оперировать им, как в обычном текстовом редакторе, аля sublime, ну и последний, визуальный, в котором вы можете выбирать текст для дальнейшего взаимодействия с ним. Стоит отметить, что визуальных режимов 3 - обычный, в котором вы выбираете текст по символьно, строчный, в котором вы вы выбираете текст по строчно и блочный, в котором вы задаете 2 точки прямоугольника, весь текст в котором выделяется и пригоден для взаимодействия. 

Я не собираюсь писать кучу комманд для взаимодействия, так как моя цель - рассказать, да заинтересовать. Но если кому будет интересно, я готов написать все комманды, которыми чаще всего пользуюсь.

Исходя из всего, что я написал выше - вам придется полностью изменить свое отношение к работе с текстом, что позволит вам увеличить вашу скорость редактирования/поиска текста. 


Написать про то, что мне нравится в виме, макросы, регекс, плагины, полная настройка, скорость


{% highlight ruby %}
{% endhighlight %}
